name: Build & Release

on: [push, pull_request]

permissions:
  contents: write
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Tools
        run: |
          sudo apt update
          sudo apt install -y xxd valgrind apache2-utils gcc-14 build-essential siege
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 500
          gcc --version

      - name: Generate Configuration Files
        run: |
          echo 'root = "'$(pwd)'/conf";' > conf/fhttpd.conf
          echo '' >> conf/fhttpd.conf
          echo 'include_optional "conf.d/*.conf";' >> conf/fhttpd.conf
          echo 'include_optional "hosts.d/*.conf";' >> conf/fhttpd.conf

      - name: Build
        run: |
          ./bootstrap
          ./configure CC=/usr/bin/gcc-14 --prefix=$(pwd)/build --disable-silent-rules --enable-optimizations --enable-mod-all
          make -j$(nproc)
          make install

      - name: Test
        run: |
          make distcheck
          rm -rf freehttpd-*/ *.tar.*

      - name: Benchmark
        run: |
          BINDIR=$(pwd)/build/bin make check-benchmark || (tail -n100 tests/freehttpd.log && exit 1)

      - name: Valgrind Benchmark
        run: |
          BINDIR=$(pwd)/build/bin make check-valgrind-benchmark || (tail -n100 tests/freehttpd-valgrind.log && exit 1)

      - name: Import GPG Keys
        run: |
          echo "${{ secrets.COMMIT_GPG_KEY }}" > .private.key
          gpg --import .private.key
          rm -f .private.key

      - name: Create Release Archives
        run: |
          GPG_LOCAL_USER=6AE7B08C68169452 make dist-fhttpd-sign

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/
            tests/freehttpd-valgrind.log
            tests/freehttpd.log
            tests/valgrind.log
            tests/vgcore.*
						*.shar.gz
            *.tar.gz
            *.tar.bz2
            *.tar.xz
            *.asc

  release:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.repository_owner == 'onesoft-sudo' && github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build-artifacts

      - name: Automatic versioning
        id: automatic_versioning
        uses: onesoft-sudo/conventional-release-action@main
        with:
          commit-message-format: "release: v%s [skip ci]"
          git-gpg-key: ${{ secrets.COMMIT_GPG_KEY }}
          version-json-file: "./.github/version.json"
          git-user-name: "Conventional Release Action"
          git-user-email: rakinar2@onesoftnet.eu.org
          git-sign-off: true
          changelog-file: ChangeLog
          changelog-format: plain
          allowed-commit-types: feat,fix,refactor,perf,ci,build,test,revert,chore,release,deps

      - name: Create release
        if: ${{ steps.automatic_versioning.outputs.tag != '' }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.automatic_versioning.outputs.tag }}
          name: ${{ steps.automatic_versioning.outputs.tag }}
          body: ${{ steps.automatic_versioning.outputs.release_notes }}
          artifacts: |
             build-artifacts/*.shar.gz,
             build-artifacts/*.tar.gz,
             build-artifacts/*.tar.xz,
             build-artifacts/*.tar.bz2,
             build-artifacts/*.asc
